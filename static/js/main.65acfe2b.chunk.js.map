{"version":3,"sources":["Components/ReduceFractions.js","reduceFraction.js","App.js","serviceWorker.js","index.js"],"names":["ReduceFractions","state","numerator","denominator","v","value","Number","parseInt","isNaN","this","setState","className","onChange","e","handleChangeNumerator","target","style","opacity","handleChangeDenominator","onClick","fraction","gcd","a","b","reduceFraction","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAMqBA,E,4MAEjBC,MAAQ,CACJC,UAAW,EACXC,YAAa,G,oEAGKC,GAClB,IAAMC,EAAQC,OAAOC,SAASH,GAE1BC,IAAUG,MAAMH,GAChBI,KAAKC,SAAS,CACVR,UAAWG,IAGfI,KAAKC,SAAS,CACVR,UAAW,O,8CAKCE,GACpB,IAAMC,EAAQC,OAAOC,SAASH,GAE1BC,IAAUG,MAAMH,GAChBI,KAAKC,SAAS,CACVP,YAAaE,IAGjBI,KAAKC,SAAS,CACVP,YAAa,O,+BAKf,IAAD,SAE8BM,KAAKR,MAAhCC,EAFH,EAEGA,UAAWC,EAFd,EAEcA,YAEnB,OACI,yBAAKQ,UAAU,QACX,sCAAW,6BAAX,cACA,yBAAKA,UAAU,UACX,2BAAON,MAAOH,EAAWU,SAAU,SAACC,GAAD,OAAO,EAAKC,sBAAsBD,EAAEE,OAAOV,UAC9E,wBAAIW,MAAO,CAAEC,QAAS,KAAQN,UAAU,qBACxC,2BAAON,MAAOF,EAAaS,SAAU,SAACC,GAAD,OAAO,EAAKK,wBAAwBL,EAAEE,OAAOV,UAClF,4BAAQc,QAAS,WACb,IAAMC,EC7Cf,SAAwBlB,EAAWC,GAG9C,IAAIkB,EAAM,SAASA,EAAIC,EAAGC,GACtB,OAAOA,EAAIF,EAAIE,EAAGD,EAAIC,GAAKD,GAK/B,MAAO,CAACpB,GAFRmB,EAAMA,EAAInB,EAAWC,IAEIA,EAAckB,GDoCFG,CAAetB,EAAWC,GAE3C,EAAKO,SAAS,CACVR,UAAWkB,EAAS,GACpBjB,YAAaiB,EAAS,OAL9B,gB,GA9CyBK,aEM9BC,MATf,WACE,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,wBACf,kBAAC,EAAD,QCKcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.65acfe2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport reduceFraction from '../reduceFraction';\n\nimport '../form.css';\n\nexport default class ReduceFractions extends Component {\n\n    state = {\n        numerator: 4,\n        denominator: 8\n    }\n\n    handleChangeNumerator(v) {\n        const value = Number.parseInt(v);\n\n        if (value && !isNaN(value)) {\n            this.setState({\n                numerator: value,\n            });\n        } else {\n            this.setState({\n                numerator: \"\",\n            });\n        }\n    }\n\n    handleChangeDenominator(v) {\n        const value = Number.parseInt(v);\n\n        if (value && !isNaN(value)) {\n            this.setState({\n                denominator: value,\n            });\n        } else {\n            this.setState({\n                denominator: \"\",\n            });\n        }\n    }\n\n    render() {\n\n        const { numerator, denominator } = this.state;\n\n        return (\n            <div className=\"form\">\n                <h1>Reduce <br /> Fractions</h1>\n                <div className=\"inputs\">\n                    <input value={numerator} onChange={(e) => this.handleChangeNumerator(e.target.value)} />\n                    <hr style={{ opacity: '0', }} className=\"fraction-divider\"></hr>\n                    <input value={denominator} onChange={(e) => this.handleChangeDenominator(e.target.value)} />\n                    <button onClick={() => {\n                        const fraction = reduceFraction(numerator, denominator);\n\n                        this.setState({\n                            numerator: fraction[0],\n                            denominator: fraction[1],\n                        });\n                    }}>Reduce</button></div>\n            </div>\n        )\n    }\n}\n","\n/**\n * Takes a fraction and returns it reduced.\n * \n * @param {number} numerator \n * @param {number} denominator \n */\n\nexport default function reduceFraction(numerator, denominator) {\n\n    // Recursive method for finding the greatest common denominator.\n    let gcd = function gcd(a, b) {\n        return b ? gcd(b, a % b) : a;\n    };\n\n    gcd = gcd(numerator, denominator);\n\n    return [numerator / gcd, denominator / gcd];\n}","import React from 'react';\nimport ReduceFractions from './Components/ReduceFractions';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"background-triangle\"></div>\n      <ReduceFractions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}